
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a66  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000ada  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000ada  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ada  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d4  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000888  00000000  00000000  00001e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a53  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00003128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000570  00000000  00000000  00003318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076f  00000000  00000000  00003888  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003ff7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 81 01 	call	0x302	; 0x302 <main>
  74:	0c 94 31 05 	jmp	0xa62	; 0xa62 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:


void APP_init(void)
{
	//Car leds
	LED_init(CAR_LED_PORT,CAR_RED_LED);
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_init>
	LED_init(CAR_LED_PORT,CAR_YELLOW_LED);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_init>
	LED_init(CAR_LED_PORT,CAR_GREEN_LED);
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_init>
	//Peds Leds
	LED_init(PED_LED_PORT,PED_RED_LED);
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_init>
	LED_init(PED_LED_PORT,PED_YELLOW_LED);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_init>
	LED_init(PED_LED_PORT,PED_GREEN_LED);
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_init>
	//Button
	BUTTON_init(BUTTON_PORT,BUTTON_PIN);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <BUTTON_init>
	//Timer
	TIMER_init();
  b4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <TIMER_init>
	//Interrupts
	Interrups_control(INT_ON,INT0,rise);
  b8:	42 e0       	ldi	r20, 0x02	; 2
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Interrups_control>
  c2:	08 95       	ret

000000c4 <APP_Start>:
	
}

void APP_Start(void)
{
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
	//check the mode
	switch(mode)
  ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mode>
  ce:	88 23       	and	r24, r24
  d0:	21 f0       	breq	.+8      	; 0xda <APP_Start+0x16>
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	09 f4       	brne	.+2      	; 0xd8 <APP_Start+0x14>
  d6:	8b c0       	rjmp	.+278    	; 0x1ee <APP_Start+0x12a>
  d8:	f1 c0       	rjmp	.+482    	; 0x2bc <APP_Start+0x1f8>
	{
		//*******************************************************************************************
		//NORMAL MODE *******************************************************************************
		case Nomral_Mode:
		LED_OFF(PED_LED_PORT,PED_GREEN_LED);
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	82 e4       	ldi	r24, 0x42	; 66
  de:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
		LED_OFF(PED_LED_PORT,PED_RED_LED);
  e2:	62 e0       	ldi	r22, 0x02	; 2
  e4:	82 e4       	ldi	r24, 0x42	; 66
  e6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
		LED_OFF(PED_LED_PORT,PED_YELLOW_LED);
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	82 e4       	ldi	r24, 0x42	; 66
  ee:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
		LED_OFF(CAR_LED_PORT,CAR_GREEN_LED);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	81 e4       	ldi	r24, 0x41	; 65
  f6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
		LED_OFF(CAR_LED_PORT,CAR_RED_LED);
  fa:	62 e0       	ldi	r22, 0x02	; 2
  fc:	81 e4       	ldi	r24, 0x41	; 65
  fe:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
		LED_OFF(CAR_LED_PORT,CAR_YELLOW_LED);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	81 e4       	ldi	r24, 0x41	; 65
 106:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
		
		//check which led has the turn to be on
		switch(Car_Next_Led)
 10a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Car_Next_Led>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	f9 f0       	breq	.+62     	; 0x150 <APP_Start+0x8c>
 112:	20 f0       	brcs	.+8      	; 0x11c <APP_Start+0x58>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	09 f4       	brne	.+2      	; 0x11a <APP_Start+0x56>
 118:	4f c0       	rjmp	.+158    	; 0x1b8 <APP_Start+0xf4>
 11a:	d0 c0       	rjmp	.+416    	; 0x2bc <APP_Start+0x1f8>
		{
			case Green:
			Car_Last_Led=0;
 11c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			LED_ON(PED_LED_PORT,PED_RED_LED); //ped red on
 120:	62 e0       	ldi	r22, 0x02	; 2
 122:	82 e4       	ldi	r24, 0x42	; 66
 124:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
			LED_OFF(CAR_LED_PORT,CAR_YELLOW_LED);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	81 e4       	ldi	r24, 0x41	; 65
 12c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
			LED_OFF(CAR_LED_PORT,CAR_RED_LED);
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	81 e4       	ldi	r24, 0x41	; 65
 134:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
			LED_ON(CAR_LED_PORT,CAR_GREEN_LED); //green on
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	81 e4       	ldi	r24, 0x41	; 65
 13c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
			TIMER_delay(5000);
 140:	88 e8       	ldi	r24, 0x88	; 136
 142:	93 e1       	ldi	r25, 0x13	; 19
 144:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
			Car_Next_Led= Yellow;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Car_Next_Led>
			
			break;
 14e:	b6 c0       	rjmp	.+364    	; 0x2bc <APP_Start+0x1f8>
			
			case Yellow:;
			unit8_t temp;
			temp = Car_Last_Led;
 150:	10 91 60 00 	lds	r17, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
			Car_Last_Led = 1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			LED_ON(PED_LED_PORT,PED_RED_LED); //ped red on
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	82 e4       	ldi	r24, 0x42	; 66
 15e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
			LED_OFF(CAR_LED_PORT,CAR_GREEN_LED);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	81 e4       	ldi	r24, 0x41	; 65
 166:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
			LED_OFF(CAR_LED_PORT,CAR_RED_LED);
 16a:	62 e0       	ldi	r22, 0x02	; 2
 16c:	81 e4       	ldi	r24, 0x41	; 65
 16e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
			for(int i = 0 ;i <4; i++)
 172:	c0 e0       	ldi	r28, 0x00	; 0
 174:	d0 e0       	ldi	r29, 0x00	; 0
 176:	11 c0       	rjmp	.+34     	; 0x19a <APP_Start+0xd6>
			{
				LED_ON(CAR_LED_PORT,CAR_YELLOW_LED); //yellow blink
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	81 e4       	ldi	r24, 0x41	; 65
 17c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
				TIMER_delay(1000);
 180:	88 ee       	ldi	r24, 0xE8	; 232
 182:	93 e0       	ldi	r25, 0x03	; 3
 184:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
				LED_OFF(CAR_LED_PORT,CAR_YELLOW_LED);
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	81 e4       	ldi	r24, 0x41	; 65
 18c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
				TIMER_delay(250);
 190:	8a ef       	ldi	r24, 0xFA	; 250
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
			temp = Car_Last_Led;
			Car_Last_Led = 1;
			LED_ON(PED_LED_PORT,PED_RED_LED); //ped red on
			LED_OFF(CAR_LED_PORT,CAR_GREEN_LED);
			LED_OFF(CAR_LED_PORT,CAR_RED_LED);
			for(int i = 0 ;i <4; i++)
 198:	21 96       	adiw	r28, 0x01	; 1
 19a:	c4 30       	cpi	r28, 0x04	; 4
 19c:	d1 05       	cpc	r29, r1
 19e:	64 f3       	brlt	.-40     	; 0x178 <APP_Start+0xb4>
				TIMER_delay(1000);
				LED_OFF(CAR_LED_PORT,CAR_YELLOW_LED);
				TIMER_delay(250);
			}
			
			switch(temp) // Green->Yellow->Red->Yellow->Green
 1a0:	11 23       	and	r17, r17
 1a2:	19 f0       	breq	.+6      	; 0x1aa <APP_Start+0xe6>
 1a4:	12 30       	cpi	r17, 0x02	; 2
 1a6:	29 f0       	breq	.+10     	; 0x1b2 <APP_Start+0xee>
 1a8:	89 c0       	rjmp	.+274    	; 0x2bc <APP_Start+0x1f8>
			{
			case Green: Car_Next_Led = Red; break;
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Car_Next_Led>
 1b0:	85 c0       	rjmp	.+266    	; 0x2bc <APP_Start+0x1f8>
			case Red: Car_Next_Led = Green; break;
 1b2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Car_Next_Led>
 1b6:	82 c0       	rjmp	.+260    	; 0x2bc <APP_Start+0x1f8>
			}

			break;
			
			case Red:
			Car_Last_Led=2;
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			LED_ON(PED_LED_PORT,PED_RED_LED); //ped red on
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	82 e4       	ldi	r24, 0x42	; 66
 1c2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
			LED_OFF(CAR_LED_PORT,CAR_YELLOW_LED);
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	81 e4       	ldi	r24, 0x41	; 65
 1ca:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
			LED_OFF(CAR_LED_PORT,CAR_GREEN_LED); 
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	81 e4       	ldi	r24, 0x41	; 65
 1d2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
			LED_ON(CAR_LED_PORT,CAR_RED_LED); //red on
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	81 e4       	ldi	r24, 0x41	; 65
 1da:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
			TIMER_delay(5000);
 1de:	88 e8       	ldi	r24, 0x88	; 136
 1e0:	93 e1       	ldi	r25, 0x13	; 19
 1e2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
			Car_Next_Led=Yellow;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Car_Next_Led>
			
			break;
 1ec:	67 c0       	rjmp	.+206    	; 0x2bc <APP_Start+0x1f8>
		break;
		
		//*************************************************************************************************
		//Pedsedtrains MODE *******************************************************************************
		case Pedsedtrain_Mode: 
		LED_OFF(CAR_LED_PORT,CAR_GREEN_LED);
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	81 e4       	ldi	r24, 0x41	; 65
 1f2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
		LED_OFF(CAR_LED_PORT,CAR_RED_LED);
 1f6:	62 e0       	ldi	r22, 0x02	; 2
 1f8:	81 e4       	ldi	r24, 0x41	; 65
 1fa:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
		LED_OFF(CAR_LED_PORT,CAR_YELLOW_LED);
 1fe:	61 e0       	ldi	r22, 0x01	; 1
 200:	81 e4       	ldi	r24, 0x41	; 65
 202:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
		LED_OFF(PED_LED_PORT,PED_GREEN_LED);
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	82 e4       	ldi	r24, 0x42	; 66
 20a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
		LED_OFF(PED_LED_PORT,PED_RED_LED);
 20e:	62 e0       	ldi	r22, 0x02	; 2
 210:	82 e4       	ldi	r24, 0x42	; 66
 212:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
		LED_OFF(PED_LED_PORT,PED_YELLOW_LED);
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	82 e4       	ldi	r24, 0x42	; 66
 21a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
		
				if(Car_Last_Led == Red)
 21e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	a9 f4       	brne	.+42     	; 0x250 <APP_Start+0x18c>
				{
				LED_OFF(CAR_LED_PORT,CAR_YELLOW_LED);
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	81 e4       	ldi	r24, 0x41	; 65
 22a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
				LED_OFF(CAR_LED_PORT,CAR_GREEN_LED);
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	81 e4       	ldi	r24, 0x41	; 65
 232:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
				LED_ON(CAR_LED_PORT,CAR_RED_LED); //red ped on
 236:	62 e0       	ldi	r22, 0x02	; 2
 238:	81 e4       	ldi	r24, 0x41	; 65
 23a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
				LED_ON(PED_LED_PORT,PED_GREEN_LED); //green car on
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	82 e4       	ldi	r24, 0x42	; 66
 242:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
				TIMER_delay(5000);
 246:	88 e8       	ldi	r24, 0x88	; 136
 248:	93 e1       	ldi	r25, 0x13	; 19
 24a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
 24e:	34 c0       	rjmp	.+104    	; 0x2b8 <APP_Start+0x1f4>
				}else if(Car_Last_Led == Green || Car_Last_Led == Yellow)
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	90 f5       	brcc	.+100    	; 0x2b8 <APP_Start+0x1f4>
 254:	1a c0       	rjmp	.+52     	; 0x28a <APP_Start+0x1c6>
				{
				for(int i = 0 ;i <4; i++)
				{
					LED_ON(CAR_LED_PORT,CAR_YELLOW_LED); //car yellow blink
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	81 e4       	ldi	r24, 0x41	; 65
 25a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
					LED_ON(PED_LED_PORT,PED_YELLOW_LED); //Ped yellow blink
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	82 e4       	ldi	r24, 0x42	; 66
 262:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
					TIMER_delay(1000);
 266:	88 ee       	ldi	r24, 0xE8	; 232
 268:	93 e0       	ldi	r25, 0x03	; 3
 26a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
					LED_OFF(CAR_LED_PORT,CAR_YELLOW_LED);
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	81 e4       	ldi	r24, 0x41	; 65
 272:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
					LED_OFF(PED_LED_PORT,PED_YELLOW_LED);
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	82 e4       	ldi	r24, 0x42	; 66
 27a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LED_OFF>
					TIMER_delay(250);
 27e:	8a ef       	ldi	r24, 0xFA	; 250
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
				LED_ON(CAR_LED_PORT,CAR_RED_LED); //red ped on
				LED_ON(PED_LED_PORT,PED_GREEN_LED); //green car on
				TIMER_delay(5000);
				}else if(Car_Last_Led == Green || Car_Last_Led == Yellow)
				{
				for(int i = 0 ;i <4; i++)
 286:	21 96       	adiw	r28, 0x01	; 1
 288:	02 c0       	rjmp	.+4      	; 0x28e <APP_Start+0x1ca>
 28a:	c0 e0       	ldi	r28, 0x00	; 0
 28c:	d0 e0       	ldi	r29, 0x00	; 0
 28e:	c4 30       	cpi	r28, 0x04	; 4
 290:	d1 05       	cpc	r29, r1
 292:	0c f3       	brlt	.-62     	; 0x256 <APP_Start+0x192>
					TIMER_delay(1000);
					LED_OFF(CAR_LED_PORT,CAR_YELLOW_LED);
					LED_OFF(PED_LED_PORT,PED_YELLOW_LED);
					TIMER_delay(250);
				}
				LED_ON(PED_LED_PORT,PED_GREEN_LED);
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	82 e4       	ldi	r24, 0x42	; 66
 298:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
				LED_ON(CAR_LED_PORT,CAR_RED_LED);
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	81 e4       	ldi	r24, 0x41	; 65
 2a0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_ON>
				TIMER_delay(2000);
 2a4:	80 ed       	ldi	r24, 0xD0	; 208
 2a6:	97 e0       	ldi	r25, 0x07	; 7
 2a8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <TIMER_delay>
				Car_Next_Led=Yellow;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Car_Next_Led>
				Car_Last_Led=2;
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				}
				mode=Nomral_Mode;
 2b8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <mode>
				
				
		default: break;
	}
	
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	08 95       	ret

000002c4 <__vector_1>:

ISR(EXT_INT0)
{
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	8f 93       	push	r24
mode=Pedsedtrain_Mode;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <mode>
}
 2d6:	8f 91       	pop	r24
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <BUTTON_init>:

#include "button.h"

void BUTTON_init(unit8_t buttonPort,unit8_t buttonPin)//initialize		
{
	DIO_init(buttonPort,buttonPin,OUT);
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_init>
 2e8:	08 95       	ret

000002ea <LED_init>:

#include "led.h"

void LED_init(unit8_t portNumber, unit8_t pinNumber)
{
	DIO_init(portNumber,pinNumber,OUT);
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_init>
 2f0:	08 95       	ret

000002f2 <LED_ON>:
}
void LED_ON(unit8_t portNumber, unit8_t pinNumber)
{
	DIO_write(portNumber,pinNumber,HIGH);
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	0e 94 00 02 	call	0x400	; 0x400 <DIO_write>
 2f8:	08 95       	ret

000002fa <LED_OFF>:
}
void LED_OFF(unit8_t portNumber, unit8_t pinNumber)
{
	DIO_write(portNumber,pinNumber,LOW);	
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	0e 94 00 02 	call	0x400	; 0x400 <DIO_write>
 300:	08 95       	ret

00000302 <main>:

#include "Application/app.h"

int main(void)
{
    APP_init();
 302:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
    while (1) 
    {
		APP_Start();
 306:	0e 94 62 00 	call	0xc4	; 0xc4 <APP_Start>
 30a:	fd cf       	rjmp	.-6      	; 0x306 <main+0x4>

0000030c <DIO_init>:

// function definitions

void DIO_init(unit8_t portNumber, unit8_t pinNumber, unit8_t direction)
{
	switch(portNumber){
 30c:	82 34       	cpi	r24, 0x42	; 66
 30e:	31 f1       	breq	.+76     	; 0x35c <DIO_init+0x50>
 310:	18 f4       	brcc	.+6      	; 0x318 <DIO_init+0xc>
 312:	81 34       	cpi	r24, 0x41	; 65
 314:	39 f0       	breq	.+14     	; 0x324 <DIO_init+0x18>
 316:	08 95       	ret
 318:	83 34       	cpi	r24, 0x43	; 67
 31a:	e1 f1       	breq	.+120    	; 0x394 <DIO_init+0x88>
 31c:	84 34       	cpi	r24, 0x44	; 68
 31e:	09 f4       	brne	.+2      	; 0x322 <DIO_init+0x16>
 320:	54 c0       	rjmp	.+168    	; 0x3ca <DIO_init+0xbe>
 322:	08 95       	ret
		case PORT_A:
			if(direction == IN){
 324:	41 11       	cpse	r20, r1
 326:	0c c0       	rjmp	.+24     	; 0x340 <DIO_init+0x34>
				CLEAR_BIT(DDRA,pinNumber);
 328:	2a b3       	in	r18, 0x1a	; 26
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_init+0x28>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_init+0x24>
 338:	80 95       	com	r24
 33a:	82 23       	and	r24, r18
 33c:	8a bb       	out	0x1a, r24	; 26
 33e:	08 95       	ret
			}else if (direction == OUT){
 340:	41 30       	cpi	r20, 0x01	; 1
 342:	09 f0       	breq	.+2      	; 0x346 <DIO_init+0x3a>
 344:	5c c0       	rjmp	.+184    	; 0x3fe <DIO_init+0xf2>
				SET_BIT(DDRA,pinNumber);
 346:	2a b3       	in	r18, 0x1a	; 26
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_init+0x46>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	6a 95       	dec	r22
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_init+0x42>
 356:	82 2b       	or	r24, r18
 358:	8a bb       	out	0x1a, r24	; 26
 35a:	08 95       	ret
			}
			else{}
			break;
		case PORT_B:
			if(direction == IN){
 35c:	41 11       	cpse	r20, r1
 35e:	0c c0       	rjmp	.+24     	; 0x378 <DIO_init+0x6c>
				CLEAR_BIT(DDRB,pinNumber);
 360:	27 b3       	in	r18, 0x17	; 23
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_init+0x60>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_init+0x5c>
 370:	80 95       	com	r24
 372:	82 23       	and	r24, r18
 374:	87 bb       	out	0x17, r24	; 23
 376:	08 95       	ret
			}else if (direction == OUT){
 378:	41 30       	cpi	r20, 0x01	; 1
 37a:	09 f0       	breq	.+2      	; 0x37e <DIO_init+0x72>
 37c:	40 c0       	rjmp	.+128    	; 0x3fe <DIO_init+0xf2>
				SET_BIT(DDRB,pinNumber);
 37e:	27 b3       	in	r18, 0x17	; 23
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_init+0x7e>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	6a 95       	dec	r22
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_init+0x7a>
 38e:	82 2b       	or	r24, r18
 390:	87 bb       	out	0x17, r24	; 23
 392:	08 95       	ret
			}
			else{}
			break;
		case PORT_C:
			if(direction == IN){
 394:	41 11       	cpse	r20, r1
 396:	0c c0       	rjmp	.+24     	; 0x3b0 <DIO_init+0xa4>
				CLEAR_BIT(DDRC,pinNumber);
 398:	24 b3       	in	r18, 0x14	; 20
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_init+0x98>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_init+0x94>
 3a8:	80 95       	com	r24
 3aa:	82 23       	and	r24, r18
 3ac:	84 bb       	out	0x14, r24	; 20
 3ae:	08 95       	ret
			}else if (direction == OUT){
 3b0:	41 30       	cpi	r20, 0x01	; 1
 3b2:	29 f5       	brne	.+74     	; 0x3fe <DIO_init+0xf2>
				SET_BIT(DDRC,pinNumber);
 3b4:	24 b3       	in	r18, 0x14	; 20
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_init+0xb4>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_init+0xb0>
 3c4:	82 2b       	or	r24, r18
 3c6:	84 bb       	out	0x14, r24	; 20
 3c8:	08 95       	ret
			}
			else{}
			break;
		case PORT_D:
			if(direction == IN){
 3ca:	41 11       	cpse	r20, r1
 3cc:	0c c0       	rjmp	.+24     	; 0x3e6 <DIO_init+0xda>
				CLEAR_BIT(DDRD,pinNumber);
 3ce:	21 b3       	in	r18, 0x11	; 17
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_init+0xce>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_init+0xca>
 3de:	80 95       	com	r24
 3e0:	82 23       	and	r24, r18
 3e2:	81 bb       	out	0x11, r24	; 17
 3e4:	08 95       	ret
			}else if (direction == OUT){
 3e6:	41 30       	cpi	r20, 0x01	; 1
 3e8:	51 f4       	brne	.+20     	; 0x3fe <DIO_init+0xf2>
				SET_BIT(DDRD,pinNumber);
 3ea:	21 b3       	in	r18, 0x11	; 17
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_init+0xea>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	6a 95       	dec	r22
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_init+0xe6>
 3fa:	82 2b       	or	r24, r18
 3fc:	81 bb       	out	0x11, r24	; 17
 3fe:	08 95       	ret

00000400 <DIO_write>:
			break;
	}
}
void DIO_write(unit8_t portNumber, unit8_t pinNumber, unit8_t value)
{
	switch(portNumber){
 400:	82 34       	cpi	r24, 0x42	; 66
 402:	31 f1       	breq	.+76     	; 0x450 <DIO_write+0x50>
 404:	18 f4       	brcc	.+6      	; 0x40c <DIO_write+0xc>
 406:	81 34       	cpi	r24, 0x41	; 65
 408:	39 f0       	breq	.+14     	; 0x418 <DIO_write+0x18>
 40a:	08 95       	ret
 40c:	83 34       	cpi	r24, 0x43	; 67
 40e:	e1 f1       	breq	.+120    	; 0x488 <DIO_write+0x88>
 410:	84 34       	cpi	r24, 0x44	; 68
 412:	09 f4       	brne	.+2      	; 0x416 <DIO_write+0x16>
 414:	54 c0       	rjmp	.+168    	; 0x4be <DIO_write+0xbe>
 416:	08 95       	ret
		case PORT_A:
			if(value == LOW)
 418:	41 11       	cpse	r20, r1
 41a:	0c c0       	rjmp	.+24     	; 0x434 <DIO_write+0x34>
			{
				CLEAR_BIT(PORTA,pinNumber);
 41c:	2b b3       	in	r18, 0x1b	; 27
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 c0       	rjmp	.+4      	; 0x428 <DIO_write+0x28>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	6a 95       	dec	r22
 42a:	e2 f7       	brpl	.-8      	; 0x424 <DIO_write+0x24>
 42c:	80 95       	com	r24
 42e:	82 23       	and	r24, r18
 430:	8b bb       	out	0x1b, r24	; 27
 432:	08 95       	ret
			}else if (value == HIGH)
 434:	41 30       	cpi	r20, 0x01	; 1
 436:	09 f0       	breq	.+2      	; 0x43a <DIO_write+0x3a>
 438:	5c c0       	rjmp	.+184    	; 0x4f2 <DIO_write+0xf2>
			{
				SET_BIT(PORTA,pinNumber);
 43a:	2b b3       	in	r18, 0x1b	; 27
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_write+0x46>
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_write+0x42>
 44a:	82 2b       	or	r24, r18
 44c:	8b bb       	out	0x1b, r24	; 27
 44e:	08 95       	ret
			}
			else{}
		break;
		case PORT_B:
			if(value == LOW)
 450:	41 11       	cpse	r20, r1
 452:	0c c0       	rjmp	.+24     	; 0x46c <DIO_write+0x6c>
			{

				CLEAR_BIT(PORTB,pinNumber);
 454:	28 b3       	in	r18, 0x18	; 24
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_write+0x60>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	6a 95       	dec	r22
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_write+0x5c>
 464:	80 95       	com	r24
 466:	82 23       	and	r24, r18
 468:	88 bb       	out	0x18, r24	; 24
 46a:	08 95       	ret
			}else if (value == HIGH)
 46c:	41 30       	cpi	r20, 0x01	; 1
 46e:	09 f0       	breq	.+2      	; 0x472 <DIO_write+0x72>
 470:	40 c0       	rjmp	.+128    	; 0x4f2 <DIO_write+0xf2>
			{

				SET_BIT(PORTB,pinNumber);
 472:	28 b3       	in	r18, 0x18	; 24
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_write+0x7e>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_write+0x7a>
 482:	82 2b       	or	r24, r18
 484:	88 bb       	out	0x18, r24	; 24
 486:	08 95       	ret
			}
			else{}
		break;
		case PORT_C:
			if(value == LOW)
 488:	41 11       	cpse	r20, r1
 48a:	0c c0       	rjmp	.+24     	; 0x4a4 <DIO_write+0xa4>
			{
				CLEAR_BIT(PORTC,pinNumber);
 48c:	25 b3       	in	r18, 0x15	; 21
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_write+0x98>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_write+0x94>
 49c:	80 95       	com	r24
 49e:	82 23       	and	r24, r18
 4a0:	85 bb       	out	0x15, r24	; 21
 4a2:	08 95       	ret
			}else if (value == HIGH)
 4a4:	41 30       	cpi	r20, 0x01	; 1
 4a6:	29 f5       	brne	.+74     	; 0x4f2 <DIO_write+0xf2>
			{
				SET_BIT(PORTC,pinNumber);
 4a8:	25 b3       	in	r18, 0x15	; 21
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_write+0xb4>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_write+0xb0>
 4b8:	82 2b       	or	r24, r18
 4ba:	85 bb       	out	0x15, r24	; 21
 4bc:	08 95       	ret
			}
			else{}
		break;
		case PORT_D:
			if(value == LOW)
 4be:	41 11       	cpse	r20, r1
 4c0:	0c c0       	rjmp	.+24     	; 0x4da <DIO_write+0xda>
			{
				CLEAR_BIT(PORTD,pinNumber);
 4c2:	22 b3       	in	r18, 0x12	; 18
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_write+0xce>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_write+0xca>
 4d2:	80 95       	com	r24
 4d4:	82 23       	and	r24, r18
 4d6:	82 bb       	out	0x12, r24	; 18
 4d8:	08 95       	ret
			}else if (value == HIGH)
 4da:	41 30       	cpi	r20, 0x01	; 1
 4dc:	51 f4       	brne	.+20     	; 0x4f2 <DIO_write+0xf2>
			{

				SET_BIT(PORTD,pinNumber);
 4de:	22 b3       	in	r18, 0x12	; 18
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_write+0xea>
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_write+0xe6>
 4ee:	82 2b       	or	r24, r18
 4f0:	82 bb       	out	0x12, r24	; 18
 4f2:	08 95       	ret

000004f4 <Interrups_control>:
#include "interrupts.h"

void Interrups_control(unit8_t state_OnOff,unit8_t INT_Number, unit8_t sense)
{
	
if(state_OnOff==INT_ON)
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	09 f0       	breq	.+2      	; 0x4fa <Interrups_control+0x6>
 4f8:	5f c0       	rjmp	.+190    	; 0x5b8 <Interrups_control+0xc4>
{
	sei();//enable global interrupts
 4fa:	78 94       	sei
	
	switch(INT_Number)
 4fc:	61 30       	cpi	r22, 0x01	; 1
 4fe:	49 f1       	breq	.+82     	; 0x552 <Interrups_control+0x5e>
 500:	20 f0       	brcs	.+8      	; 0x50a <Interrups_control+0x16>
 502:	62 30       	cpi	r22, 0x02	; 2
 504:	09 f4       	brne	.+2      	; 0x508 <Interrups_control+0x14>
 506:	49 c0       	rjmp	.+146    	; 0x59a <Interrups_control+0xa6>
 508:	53 c0       	rjmp	.+166    	; 0x5b0 <Interrups_control+0xbc>
	{
		case INT0: 
		switch(sense)//choose interrupt sense
 50a:	41 30       	cpi	r20, 0x01	; 1
 50c:	69 f0       	breq	.+26     	; 0x528 <Interrups_control+0x34>
 50e:	28 f0       	brcs	.+10     	; 0x51a <Interrups_control+0x26>
 510:	42 30       	cpi	r20, 0x02	; 2
 512:	c1 f0       	breq	.+48     	; 0x544 <Interrups_control+0x50>
 514:	43 30       	cpi	r20, 0x03	; 3
 516:	79 f0       	breq	.+30     	; 0x536 <Interrups_control+0x42>
 518:	4b c0       	rjmp	.+150    	; 0x5b0 <Interrups_control+0xbc>
		{
			case lowlevel:	CLEAR_BIT(MCUCR,0);	CLEAR_BIT(MCUCR,1);	break;
 51a:	85 b7       	in	r24, 0x35	; 53
 51c:	8e 7f       	andi	r24, 0xFE	; 254
 51e:	85 bf       	out	0x35, r24	; 53
 520:	85 b7       	in	r24, 0x35	; 53
 522:	8d 7f       	andi	r24, 0xFD	; 253
 524:	85 bf       	out	0x35, r24	; 53
 526:	44 c0       	rjmp	.+136    	; 0x5b0 <Interrups_control+0xbc>
			case logic:		SET_BIT(MCUCR,0);	CLEAR_BIT(MCUCR,1);	break;
 528:	85 b7       	in	r24, 0x35	; 53
 52a:	81 60       	ori	r24, 0x01	; 1
 52c:	85 bf       	out	0x35, r24	; 53
 52e:	85 b7       	in	r24, 0x35	; 53
 530:	8d 7f       	andi	r24, 0xFD	; 253
 532:	85 bf       	out	0x35, r24	; 53
 534:	3d c0       	rjmp	.+122    	; 0x5b0 <Interrups_control+0xbc>
			case fall:		CLEAR_BIT(MCUCR,0);	SET_BIT(MCUCR,1);	break;
 536:	85 b7       	in	r24, 0x35	; 53
 538:	8e 7f       	andi	r24, 0xFE	; 254
 53a:	85 bf       	out	0x35, r24	; 53
 53c:	85 b7       	in	r24, 0x35	; 53
 53e:	82 60       	ori	r24, 0x02	; 2
 540:	85 bf       	out	0x35, r24	; 53
 542:	36 c0       	rjmp	.+108    	; 0x5b0 <Interrups_control+0xbc>
			case rise:		SET_BIT(MCUCR,0);	SET_BIT(MCUCR,1);	break;
 544:	85 b7       	in	r24, 0x35	; 53
 546:	81 60       	ori	r24, 0x01	; 1
 548:	85 bf       	out	0x35, r24	; 53
 54a:	85 b7       	in	r24, 0x35	; 53
 54c:	82 60       	ori	r24, 0x02	; 2
 54e:	85 bf       	out	0x35, r24	; 53
 550:	2f c0       	rjmp	.+94     	; 0x5b0 <Interrups_control+0xbc>
			default:												break;
		}
		break;
		
		case INT1:
		switch(sense)//choose interrupt sense
 552:	41 30       	cpi	r20, 0x01	; 1
 554:	69 f0       	breq	.+26     	; 0x570 <Interrups_control+0x7c>
 556:	28 f0       	brcs	.+10     	; 0x562 <Interrups_control+0x6e>
 558:	42 30       	cpi	r20, 0x02	; 2
 55a:	c1 f0       	breq	.+48     	; 0x58c <Interrups_control+0x98>
 55c:	43 30       	cpi	r20, 0x03	; 3
 55e:	79 f0       	breq	.+30     	; 0x57e <Interrups_control+0x8a>
 560:	27 c0       	rjmp	.+78     	; 0x5b0 <Interrups_control+0xbc>
		{
			case lowlevel:	CLEAR_BIT(MCUCR,2);	CLEAR_BIT(MCUCR,3);	break;
 562:	85 b7       	in	r24, 0x35	; 53
 564:	8b 7f       	andi	r24, 0xFB	; 251
 566:	85 bf       	out	0x35, r24	; 53
 568:	85 b7       	in	r24, 0x35	; 53
 56a:	87 7f       	andi	r24, 0xF7	; 247
 56c:	85 bf       	out	0x35, r24	; 53
 56e:	20 c0       	rjmp	.+64     	; 0x5b0 <Interrups_control+0xbc>
			case logic:		SET_BIT(MCUCR,2);	CLEAR_BIT(MCUCR,3);	break;
 570:	85 b7       	in	r24, 0x35	; 53
 572:	84 60       	ori	r24, 0x04	; 4
 574:	85 bf       	out	0x35, r24	; 53
 576:	85 b7       	in	r24, 0x35	; 53
 578:	87 7f       	andi	r24, 0xF7	; 247
 57a:	85 bf       	out	0x35, r24	; 53
 57c:	19 c0       	rjmp	.+50     	; 0x5b0 <Interrups_control+0xbc>
			case fall:		CLEAR_BIT(MCUCR,2);	SET_BIT(MCUCR,3);	break;
 57e:	85 b7       	in	r24, 0x35	; 53
 580:	8b 7f       	andi	r24, 0xFB	; 251
 582:	85 bf       	out	0x35, r24	; 53
 584:	85 b7       	in	r24, 0x35	; 53
 586:	88 60       	ori	r24, 0x08	; 8
 588:	85 bf       	out	0x35, r24	; 53
 58a:	12 c0       	rjmp	.+36     	; 0x5b0 <Interrups_control+0xbc>
			case rise:		SET_BIT(MCUCR,2);	SET_BIT(MCUCR,3);	break;
 58c:	85 b7       	in	r24, 0x35	; 53
 58e:	84 60       	ori	r24, 0x04	; 4
 590:	85 bf       	out	0x35, r24	; 53
 592:	85 b7       	in	r24, 0x35	; 53
 594:	88 60       	ori	r24, 0x08	; 8
 596:	85 bf       	out	0x35, r24	; 53
 598:	0b c0       	rjmp	.+22     	; 0x5b0 <Interrups_control+0xbc>
			default:												break;
		}
		break;
		
		case INT2:
		switch(sense)//choose interrupt sense
 59a:	42 30       	cpi	r20, 0x02	; 2
 59c:	31 f0       	breq	.+12     	; 0x5aa <Interrups_control+0xb6>
 59e:	43 30       	cpi	r20, 0x03	; 3
 5a0:	39 f4       	brne	.+14     	; 0x5b0 <Interrups_control+0xbc>
		{
			case fall:	CLEAR_BIT(MCUCSR,6);	break;
 5a2:	84 b7       	in	r24, 0x34	; 52
 5a4:	8f 7b       	andi	r24, 0xBF	; 191
 5a6:	84 bf       	out	0x34, r24	; 52
 5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <Interrups_control+0xbc>
			case rise:	SET_BIT(MCUCSR,6);		break;
 5aa:	84 b7       	in	r24, 0x34	; 52
 5ac:	80 64       	ori	r24, 0x40	; 64
 5ae:	84 bf       	out	0x34, r24	; 52
		break;
		
		default: break;
		}
		
		SET_BIT(GICR,6);//Enable external interrupts
 5b0:	8b b7       	in	r24, 0x3b	; 59
 5b2:	80 64       	ori	r24, 0x40	; 64
 5b4:	8b bf       	out	0x3b, r24	; 59
 5b6:	08 95       	ret
		
		
		}else if(state_OnOff==INT_OFF)
 5b8:	81 11       	cpse	r24, r1
 5ba:	01 c0       	rjmp	.+2      	; 0x5be <Interrups_control+0xca>
		{
			cli();
 5bc:	f8 94       	cli
 5be:	08 95       	ret

000005c0 <TIMER_init>:
#include "timer.h"

 
 	void TIMER_init()
	 {
	TCCR0 = 0x00; //normal mode
 5c0:	13 be       	out	0x33, r1	; 51
 5c2:	08 95       	ret

000005c4 <TIMER_delay>:
	}
	
void TIMER_delay(unit16_t Delay_ms)
{
 5c4:	8f 92       	push	r8
 5c6:	9f 92       	push	r9
 5c8:	af 92       	push	r10
 5ca:	bf 92       	push	r11
 5cc:	cf 92       	push	r12
 5ce:	df 92       	push	r13
 5d0:	ef 92       	push	r14
 5d2:	ff 92       	push	r15
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	ec 01       	movw	r28, r24
	SET_BIT(TCCR0,2); //set 256 prescaler
 5da:	83 b7       	in	r24, 0x33	; 51
 5dc:	84 60       	ori	r24, 0x04	; 4
 5de:	83 bf       	out	0x33, r24	; 51
	unit32_t Overflows=0;
	
	TICKS = 256.0/1000.0; //ms    
	Max_Delay= 65.536; //ms		
	
	if(Delay_ms<Max_Delay)
 5e0:	be 01       	movw	r22, r28
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__floatunsisf>
 5ea:	6b 01       	movw	r12, r22
 5ec:	7c 01       	movw	r14, r24
 5ee:	2f e6       	ldi	r18, 0x6F	; 111
 5f0:	32 e1       	ldi	r19, 0x12	; 18
 5f2:	43 e8       	ldi	r20, 0x83	; 131
 5f4:	52 e4       	ldi	r21, 0x42	; 66
 5f6:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__cmpsf2>
 5fa:	88 23       	and	r24, r24
 5fc:	9c f4       	brge	.+38     	; 0x624 <TIMER_delay+0x60>
	{
		Initial_Time = (Max_Delay-Delay_ms)/TICKS;
 5fe:	a7 01       	movw	r20, r14
 600:	96 01       	movw	r18, r12
 602:	6f e6       	ldi	r22, 0x6F	; 111
 604:	72 e1       	ldi	r23, 0x12	; 18
 606:	83 e8       	ldi	r24, 0x83	; 131
 608:	92 e4       	ldi	r25, 0x42	; 66
 60a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__subsf3>
 60e:	2f e6       	ldi	r18, 0x6F	; 111
 610:	32 e1       	ldi	r19, 0x12	; 18
 612:	43 e8       	ldi	r20, 0x83	; 131
 614:	5e e3       	ldi	r21, 0x3E	; 62
 616:	0e 94 de 03 	call	0x7bc	; 0x7bc <__divsf3>
 61a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__fixunssfsi>
		No_of_Overflows = 1;
 61e:	c1 e0       	ldi	r28, 0x01	; 1
 620:	d0 e0       	ldi	r29, 0x00	; 0
 622:	3f c0       	rjmp	.+126    	; 0x6a2 <TIMER_delay+0xde>
		
	}else if(Delay_ms == (int)Max_Delay)
 624:	c1 34       	cpi	r28, 0x41	; 65
 626:	d1 05       	cpc	r29, r1
 628:	c9 f1       	breq	.+114    	; 0x69c <TIMER_delay+0xd8>
	{
		Initial_Time=0;
		No_of_Overflows=1;
	}else
	{
		No_of_Overflows = mceil((double)Delay_ms ,Max_Delay);
 62a:	2f e6       	ldi	r18, 0x6F	; 111
 62c:	32 e1       	ldi	r19, 0x12	; 18
 62e:	43 e8       	ldi	r20, 0x83	; 131
 630:	52 e4       	ldi	r21, 0x42	; 66
 632:	c7 01       	movw	r24, r14
 634:	b6 01       	movw	r22, r12
 636:	0e 94 6d 03 	call	0x6da	; 0x6da <__addsf3>
 63a:	20 e0       	ldi	r18, 0x00	; 0
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	40 e8       	ldi	r20, 0x80	; 128
 640:	5f e3       	ldi	r21, 0x3F	; 63
 642:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__subsf3>
 646:	2f e6       	ldi	r18, 0x6F	; 111
 648:	32 e1       	ldi	r19, 0x12	; 18
 64a:	43 e8       	ldi	r20, 0x83	; 131
 64c:	52 e4       	ldi	r21, 0x42	; 66
 64e:	0e 94 de 03 	call	0x7bc	; 0x7bc <__divsf3>
 652:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__fixunssfsi>
 656:	4b 01       	movw	r8, r22
 658:	5c 01       	movw	r10, r24
 65a:	eb 01       	movw	r28, r22
		Initial_Time = 256 - ((double)Delay_ms/TICKS)/No_of_Overflows;
 65c:	2f e6       	ldi	r18, 0x6F	; 111
 65e:	32 e1       	ldi	r19, 0x12	; 18
 660:	43 e8       	ldi	r20, 0x83	; 131
 662:	5e e3       	ldi	r21, 0x3E	; 62
 664:	c7 01       	movw	r24, r14
 666:	b6 01       	movw	r22, r12
 668:	0e 94 de 03 	call	0x7bc	; 0x7bc <__divsf3>
 66c:	6b 01       	movw	r12, r22
 66e:	7c 01       	movw	r14, r24
 670:	b4 01       	movw	r22, r8
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__floatunsisf>
 67a:	9b 01       	movw	r18, r22
 67c:	ac 01       	movw	r20, r24
 67e:	c7 01       	movw	r24, r14
 680:	b6 01       	movw	r22, r12
 682:	0e 94 de 03 	call	0x7bc	; 0x7bc <__divsf3>
 686:	9b 01       	movw	r18, r22
 688:	ac 01       	movw	r20, r24
 68a:	60 e0       	ldi	r22, 0x00	; 0
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	80 e8       	ldi	r24, 0x80	; 128
 690:	93 e4       	ldi	r25, 0x43	; 67
 692:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__subsf3>
 696:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__fixunssfsi>
 69a:	03 c0       	rjmp	.+6      	; 0x6a2 <TIMER_delay+0xde>
		Initial_Time = (Max_Delay-Delay_ms)/TICKS;
		No_of_Overflows = 1;
		
	}else if(Delay_ms == (int)Max_Delay)
	{
		Initial_Time=0;
 69c:	60 e0       	ldi	r22, 0x00	; 0
		No_of_Overflows=1;
 69e:	c1 e0       	ldi	r28, 0x01	; 1
 6a0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		No_of_Overflows = mceil((double)Delay_ms ,Max_Delay);
		Initial_Time = 256 - ((double)Delay_ms/TICKS)/No_of_Overflows;
	}
	
	TCNT0 = Initial_Time;
 6a2:	62 bf       	out	0x32, r22	; 50
{
	SET_BIT(TCCR0,2); //set 256 prescaler
	
	unit16_t No_of_Overflows,Initial_Time;
	double Max_Delay,TICKS;
	unit32_t Overflows=0;
 6a4:	20 e0       	ldi	r18, 0x00	; 0
 6a6:	30 e0       	ldi	r19, 0x00	; 0
		No_of_Overflows = mceil((double)Delay_ms ,Max_Delay);
		Initial_Time = 256 - ((double)Delay_ms/TICKS)/No_of_Overflows;
	}
	
	TCNT0 = Initial_Time;
	while(Overflows<No_of_Overflows)
 6a8:	08 c0       	rjmp	.+16     	; 0x6ba <TIMER_delay+0xf6>
	{
		while(READ_BIT(TIFR,0)==0);	//busy wait
 6aa:	08 b6       	in	r0, 0x38	; 56
 6ac:	00 fe       	sbrs	r0, 0
 6ae:	fd cf       	rjmp	.-6      	; 0x6aa <TIMER_delay+0xe6>
		SET_BIT(TIFR,0);			//clear overflow flag
 6b0:	88 b7       	in	r24, 0x38	; 56
 6b2:	81 60       	ori	r24, 0x01	; 1
 6b4:	88 bf       	out	0x38, r24	; 56
		Overflows++;				//increment counter
 6b6:	2f 5f       	subi	r18, 0xFF	; 255
 6b8:	3f 4f       	sbci	r19, 0xFF	; 255
		No_of_Overflows = mceil((double)Delay_ms ,Max_Delay);
		Initial_Time = 256 - ((double)Delay_ms/TICKS)/No_of_Overflows;
	}
	
	TCNT0 = Initial_Time;
	while(Overflows<No_of_Overflows)
 6ba:	2c 17       	cp	r18, r28
 6bc:	3d 07       	cpc	r19, r29
 6be:	a8 f3       	brcs	.-22     	; 0x6aa <TIMER_delay+0xe6>
		while(READ_BIT(TIFR,0)==0);	//busy wait
		SET_BIT(TIFR,0);			//clear overflow flag
		Overflows++;				//increment counter
	}
	
	TCCR0 = 0x00;	//Timer stop
 6c0:	13 be       	out	0x33, r1	; 51
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	ff 90       	pop	r15
 6c8:	ef 90       	pop	r14
 6ca:	df 90       	pop	r13
 6cc:	cf 90       	pop	r12
 6ce:	bf 90       	pop	r11
 6d0:	af 90       	pop	r10
 6d2:	9f 90       	pop	r9
 6d4:	8f 90       	pop	r8
 6d6:	08 95       	ret

000006d8 <__subsf3>:
 6d8:	50 58       	subi	r21, 0x80	; 128

000006da <__addsf3>:
 6da:	bb 27       	eor	r27, r27
 6dc:	aa 27       	eor	r26, r26
 6de:	0e 94 84 03 	call	0x708	; 0x708 <__addsf3x>
 6e2:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__fp_round>
 6e6:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fp_pscA>
 6ea:	38 f0       	brcs	.+14     	; 0x6fa <__addsf3+0x20>
 6ec:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__fp_pscB>
 6f0:	20 f0       	brcs	.+8      	; 0x6fa <__addsf3+0x20>
 6f2:	39 f4       	brne	.+14     	; 0x702 <__addsf3+0x28>
 6f4:	9f 3f       	cpi	r25, 0xFF	; 255
 6f6:	19 f4       	brne	.+6      	; 0x6fe <__addsf3+0x24>
 6f8:	26 f4       	brtc	.+8      	; 0x702 <__addsf3+0x28>
 6fa:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_nan>
 6fe:	0e f4       	brtc	.+2      	; 0x702 <__addsf3+0x28>
 700:	e0 95       	com	r30
 702:	e7 fb       	bst	r30, 7
 704:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_inf>

00000708 <__addsf3x>:
 708:	e9 2f       	mov	r30, r25
 70a:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_split3>
 70e:	58 f3       	brcs	.-42     	; 0x6e6 <__addsf3+0xc>
 710:	ba 17       	cp	r27, r26
 712:	62 07       	cpc	r22, r18
 714:	73 07       	cpc	r23, r19
 716:	84 07       	cpc	r24, r20
 718:	95 07       	cpc	r25, r21
 71a:	20 f0       	brcs	.+8      	; 0x724 <__addsf3x+0x1c>
 71c:	79 f4       	brne	.+30     	; 0x73c <__addsf3x+0x34>
 71e:	a6 f5       	brtc	.+104    	; 0x788 <__addsf3x+0x80>
 720:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_zero>
 724:	0e f4       	brtc	.+2      	; 0x728 <__addsf3x+0x20>
 726:	e0 95       	com	r30
 728:	0b 2e       	mov	r0, r27
 72a:	ba 2f       	mov	r27, r26
 72c:	a0 2d       	mov	r26, r0
 72e:	0b 01       	movw	r0, r22
 730:	b9 01       	movw	r22, r18
 732:	90 01       	movw	r18, r0
 734:	0c 01       	movw	r0, r24
 736:	ca 01       	movw	r24, r20
 738:	a0 01       	movw	r20, r0
 73a:	11 24       	eor	r1, r1
 73c:	ff 27       	eor	r31, r31
 73e:	59 1b       	sub	r21, r25
 740:	99 f0       	breq	.+38     	; 0x768 <__addsf3x+0x60>
 742:	59 3f       	cpi	r21, 0xF9	; 249
 744:	50 f4       	brcc	.+20     	; 0x75a <__addsf3x+0x52>
 746:	50 3e       	cpi	r21, 0xE0	; 224
 748:	68 f1       	brcs	.+90     	; 0x7a4 <__addsf3x+0x9c>
 74a:	1a 16       	cp	r1, r26
 74c:	f0 40       	sbci	r31, 0x00	; 0
 74e:	a2 2f       	mov	r26, r18
 750:	23 2f       	mov	r18, r19
 752:	34 2f       	mov	r19, r20
 754:	44 27       	eor	r20, r20
 756:	58 5f       	subi	r21, 0xF8	; 248
 758:	f3 cf       	rjmp	.-26     	; 0x740 <__addsf3x+0x38>
 75a:	46 95       	lsr	r20
 75c:	37 95       	ror	r19
 75e:	27 95       	ror	r18
 760:	a7 95       	ror	r26
 762:	f0 40       	sbci	r31, 0x00	; 0
 764:	53 95       	inc	r21
 766:	c9 f7       	brne	.-14     	; 0x75a <__addsf3x+0x52>
 768:	7e f4       	brtc	.+30     	; 0x788 <__addsf3x+0x80>
 76a:	1f 16       	cp	r1, r31
 76c:	ba 0b       	sbc	r27, r26
 76e:	62 0b       	sbc	r22, r18
 770:	73 0b       	sbc	r23, r19
 772:	84 0b       	sbc	r24, r20
 774:	ba f0       	brmi	.+46     	; 0x7a4 <__addsf3x+0x9c>
 776:	91 50       	subi	r25, 0x01	; 1
 778:	a1 f0       	breq	.+40     	; 0x7a2 <__addsf3x+0x9a>
 77a:	ff 0f       	add	r31, r31
 77c:	bb 1f       	adc	r27, r27
 77e:	66 1f       	adc	r22, r22
 780:	77 1f       	adc	r23, r23
 782:	88 1f       	adc	r24, r24
 784:	c2 f7       	brpl	.-16     	; 0x776 <__addsf3x+0x6e>
 786:	0e c0       	rjmp	.+28     	; 0x7a4 <__addsf3x+0x9c>
 788:	ba 0f       	add	r27, r26
 78a:	62 1f       	adc	r22, r18
 78c:	73 1f       	adc	r23, r19
 78e:	84 1f       	adc	r24, r20
 790:	48 f4       	brcc	.+18     	; 0x7a4 <__addsf3x+0x9c>
 792:	87 95       	ror	r24
 794:	77 95       	ror	r23
 796:	67 95       	ror	r22
 798:	b7 95       	ror	r27
 79a:	f7 95       	ror	r31
 79c:	9e 3f       	cpi	r25, 0xFE	; 254
 79e:	08 f0       	brcs	.+2      	; 0x7a2 <__addsf3x+0x9a>
 7a0:	b0 cf       	rjmp	.-160    	; 0x702 <__addsf3+0x28>
 7a2:	93 95       	inc	r25
 7a4:	88 0f       	add	r24, r24
 7a6:	08 f0       	brcs	.+2      	; 0x7aa <__addsf3x+0xa2>
 7a8:	99 27       	eor	r25, r25
 7aa:	ee 0f       	add	r30, r30
 7ac:	97 95       	ror	r25
 7ae:	87 95       	ror	r24
 7b0:	08 95       	ret

000007b2 <__cmpsf2>:
 7b2:	0e 94 bc 04 	call	0x978	; 0x978 <__fp_cmp>
 7b6:	08 f4       	brcc	.+2      	; 0x7ba <__cmpsf2+0x8>
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	08 95       	ret

000007bc <__divsf3>:
 7bc:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__divsf3x>
 7c0:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__fp_round>
 7c4:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__fp_pscB>
 7c8:	58 f0       	brcs	.+22     	; 0x7e0 <__divsf3+0x24>
 7ca:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fp_pscA>
 7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__divsf3+0x24>
 7d0:	29 f4       	brne	.+10     	; 0x7dc <__divsf3+0x20>
 7d2:	5f 3f       	cpi	r21, 0xFF	; 255
 7d4:	29 f0       	breq	.+10     	; 0x7e0 <__divsf3+0x24>
 7d6:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_inf>
 7da:	51 11       	cpse	r21, r1
 7dc:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_szero>
 7e0:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_nan>

000007e4 <__divsf3x>:
 7e4:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_split3>
 7e8:	68 f3       	brcs	.-38     	; 0x7c4 <__divsf3+0x8>

000007ea <__divsf3_pse>:
 7ea:	99 23       	and	r25, r25
 7ec:	b1 f3       	breq	.-20     	; 0x7da <__divsf3+0x1e>
 7ee:	55 23       	and	r21, r21
 7f0:	91 f3       	breq	.-28     	; 0x7d6 <__divsf3+0x1a>
 7f2:	95 1b       	sub	r25, r21
 7f4:	55 0b       	sbc	r21, r21
 7f6:	bb 27       	eor	r27, r27
 7f8:	aa 27       	eor	r26, r26
 7fa:	62 17       	cp	r22, r18
 7fc:	73 07       	cpc	r23, r19
 7fe:	84 07       	cpc	r24, r20
 800:	38 f0       	brcs	.+14     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 802:	9f 5f       	subi	r25, 0xFF	; 255
 804:	5f 4f       	sbci	r21, 0xFF	; 255
 806:	22 0f       	add	r18, r18
 808:	33 1f       	adc	r19, r19
 80a:	44 1f       	adc	r20, r20
 80c:	aa 1f       	adc	r26, r26
 80e:	a9 f3       	breq	.-22     	; 0x7fa <__divsf3_pse+0x10>
 810:	35 d0       	rcall	.+106    	; 0x87c <__stack+0x1d>
 812:	0e 2e       	mov	r0, r30
 814:	3a f0       	brmi	.+14     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 816:	e0 e8       	ldi	r30, 0x80	; 128
 818:	32 d0       	rcall	.+100    	; 0x87e <__stack+0x1f>
 81a:	91 50       	subi	r25, 0x01	; 1
 81c:	50 40       	sbci	r21, 0x00	; 0
 81e:	e6 95       	lsr	r30
 820:	00 1c       	adc	r0, r0
 822:	ca f7       	brpl	.-14     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 824:	2b d0       	rcall	.+86     	; 0x87c <__stack+0x1d>
 826:	fe 2f       	mov	r31, r30
 828:	29 d0       	rcall	.+82     	; 0x87c <__stack+0x1d>
 82a:	66 0f       	add	r22, r22
 82c:	77 1f       	adc	r23, r23
 82e:	88 1f       	adc	r24, r24
 830:	bb 1f       	adc	r27, r27
 832:	26 17       	cp	r18, r22
 834:	37 07       	cpc	r19, r23
 836:	48 07       	cpc	r20, r24
 838:	ab 07       	cpc	r26, r27
 83a:	b0 e8       	ldi	r27, 0x80	; 128
 83c:	09 f0       	breq	.+2      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 83e:	bb 0b       	sbc	r27, r27
 840:	80 2d       	mov	r24, r0
 842:	bf 01       	movw	r22, r30
 844:	ff 27       	eor	r31, r31
 846:	93 58       	subi	r25, 0x83	; 131
 848:	5f 4f       	sbci	r21, 0xFF	; 255
 84a:	3a f0       	brmi	.+14     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 84c:	9e 3f       	cpi	r25, 0xFE	; 254
 84e:	51 05       	cpc	r21, r1
 850:	78 f0       	brcs	.+30     	; 0x870 <__stack+0x11>
 852:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_inf>
 856:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_szero>
 85a:	5f 3f       	cpi	r21, 0xFF	; 255
 85c:	e4 f3       	brlt	.-8      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 85e:	98 3e       	cpi	r25, 0xE8	; 232
 860:	d4 f3       	brlt	.-12     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 862:	86 95       	lsr	r24
 864:	77 95       	ror	r23
 866:	67 95       	ror	r22
 868:	b7 95       	ror	r27
 86a:	f7 95       	ror	r31
 86c:	9f 5f       	subi	r25, 0xFF	; 255
 86e:	c9 f7       	brne	.-14     	; 0x862 <__stack+0x3>
 870:	88 0f       	add	r24, r24
 872:	91 1d       	adc	r25, r1
 874:	96 95       	lsr	r25
 876:	87 95       	ror	r24
 878:	97 f9       	bld	r25, 7
 87a:	08 95       	ret
 87c:	e1 e0       	ldi	r30, 0x01	; 1
 87e:	66 0f       	add	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	88 1f       	adc	r24, r24
 884:	bb 1f       	adc	r27, r27
 886:	62 17       	cp	r22, r18
 888:	73 07       	cpc	r23, r19
 88a:	84 07       	cpc	r24, r20
 88c:	ba 07       	cpc	r27, r26
 88e:	20 f0       	brcs	.+8      	; 0x898 <__stack+0x39>
 890:	62 1b       	sub	r22, r18
 892:	73 0b       	sbc	r23, r19
 894:	84 0b       	sbc	r24, r20
 896:	ba 0b       	sbc	r27, r26
 898:	ee 1f       	adc	r30, r30
 89a:	88 f7       	brcc	.-30     	; 0x87e <__stack+0x1f>
 89c:	e0 95       	com	r30
 89e:	08 95       	ret

000008a0 <__fixunssfsi>:
 8a0:	0e 94 10 05 	call	0xa20	; 0xa20 <__fp_splitA>
 8a4:	88 f0       	brcs	.+34     	; 0x8c8 <__fixunssfsi+0x28>
 8a6:	9f 57       	subi	r25, 0x7F	; 127
 8a8:	98 f0       	brcs	.+38     	; 0x8d0 <__fixunssfsi+0x30>
 8aa:	b9 2f       	mov	r27, r25
 8ac:	99 27       	eor	r25, r25
 8ae:	b7 51       	subi	r27, 0x17	; 23
 8b0:	b0 f0       	brcs	.+44     	; 0x8de <__fixunssfsi+0x3e>
 8b2:	e1 f0       	breq	.+56     	; 0x8ec <__fixunssfsi+0x4c>
 8b4:	66 0f       	add	r22, r22
 8b6:	77 1f       	adc	r23, r23
 8b8:	88 1f       	adc	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	1a f0       	brmi	.+6      	; 0x8c4 <__fixunssfsi+0x24>
 8be:	ba 95       	dec	r27
 8c0:	c9 f7       	brne	.-14     	; 0x8b4 <__fixunssfsi+0x14>
 8c2:	14 c0       	rjmp	.+40     	; 0x8ec <__fixunssfsi+0x4c>
 8c4:	b1 30       	cpi	r27, 0x01	; 1
 8c6:	91 f0       	breq	.+36     	; 0x8ec <__fixunssfsi+0x4c>
 8c8:	0e 94 2a 05 	call	0xa54	; 0xa54 <__fp_zero>
 8cc:	b1 e0       	ldi	r27, 0x01	; 1
 8ce:	08 95       	ret
 8d0:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_zero>
 8d4:	67 2f       	mov	r22, r23
 8d6:	78 2f       	mov	r23, r24
 8d8:	88 27       	eor	r24, r24
 8da:	b8 5f       	subi	r27, 0xF8	; 248
 8dc:	39 f0       	breq	.+14     	; 0x8ec <__fixunssfsi+0x4c>
 8de:	b9 3f       	cpi	r27, 0xF9	; 249
 8e0:	cc f3       	brlt	.-14     	; 0x8d4 <__fixunssfsi+0x34>
 8e2:	86 95       	lsr	r24
 8e4:	77 95       	ror	r23
 8e6:	67 95       	ror	r22
 8e8:	b3 95       	inc	r27
 8ea:	d9 f7       	brne	.-10     	; 0x8e2 <__fixunssfsi+0x42>
 8ec:	3e f4       	brtc	.+14     	; 0x8fc <__fixunssfsi+0x5c>
 8ee:	90 95       	com	r25
 8f0:	80 95       	com	r24
 8f2:	70 95       	com	r23
 8f4:	61 95       	neg	r22
 8f6:	7f 4f       	sbci	r23, 0xFF	; 255
 8f8:	8f 4f       	sbci	r24, 0xFF	; 255
 8fa:	9f 4f       	sbci	r25, 0xFF	; 255
 8fc:	08 95       	ret

000008fe <__floatunsisf>:
 8fe:	e8 94       	clt
 900:	09 c0       	rjmp	.+18     	; 0x914 <__floatsisf+0x12>

00000902 <__floatsisf>:
 902:	97 fb       	bst	r25, 7
 904:	3e f4       	brtc	.+14     	; 0x914 <__floatsisf+0x12>
 906:	90 95       	com	r25
 908:	80 95       	com	r24
 90a:	70 95       	com	r23
 90c:	61 95       	neg	r22
 90e:	7f 4f       	sbci	r23, 0xFF	; 255
 910:	8f 4f       	sbci	r24, 0xFF	; 255
 912:	9f 4f       	sbci	r25, 0xFF	; 255
 914:	99 23       	and	r25, r25
 916:	a9 f0       	breq	.+42     	; 0x942 <__floatsisf+0x40>
 918:	f9 2f       	mov	r31, r25
 91a:	96 e9       	ldi	r25, 0x96	; 150
 91c:	bb 27       	eor	r27, r27
 91e:	93 95       	inc	r25
 920:	f6 95       	lsr	r31
 922:	87 95       	ror	r24
 924:	77 95       	ror	r23
 926:	67 95       	ror	r22
 928:	b7 95       	ror	r27
 92a:	f1 11       	cpse	r31, r1
 92c:	f8 cf       	rjmp	.-16     	; 0x91e <__floatsisf+0x1c>
 92e:	fa f4       	brpl	.+62     	; 0x96e <__floatsisf+0x6c>
 930:	bb 0f       	add	r27, r27
 932:	11 f4       	brne	.+4      	; 0x938 <__floatsisf+0x36>
 934:	60 ff       	sbrs	r22, 0
 936:	1b c0       	rjmp	.+54     	; 0x96e <__floatsisf+0x6c>
 938:	6f 5f       	subi	r22, 0xFF	; 255
 93a:	7f 4f       	sbci	r23, 0xFF	; 255
 93c:	8f 4f       	sbci	r24, 0xFF	; 255
 93e:	9f 4f       	sbci	r25, 0xFF	; 255
 940:	16 c0       	rjmp	.+44     	; 0x96e <__floatsisf+0x6c>
 942:	88 23       	and	r24, r24
 944:	11 f0       	breq	.+4      	; 0x94a <__floatsisf+0x48>
 946:	96 e9       	ldi	r25, 0x96	; 150
 948:	11 c0       	rjmp	.+34     	; 0x96c <__floatsisf+0x6a>
 94a:	77 23       	and	r23, r23
 94c:	21 f0       	breq	.+8      	; 0x956 <__floatsisf+0x54>
 94e:	9e e8       	ldi	r25, 0x8E	; 142
 950:	87 2f       	mov	r24, r23
 952:	76 2f       	mov	r23, r22
 954:	05 c0       	rjmp	.+10     	; 0x960 <__floatsisf+0x5e>
 956:	66 23       	and	r22, r22
 958:	71 f0       	breq	.+28     	; 0x976 <__floatsisf+0x74>
 95a:	96 e8       	ldi	r25, 0x86	; 134
 95c:	86 2f       	mov	r24, r22
 95e:	70 e0       	ldi	r23, 0x00	; 0
 960:	60 e0       	ldi	r22, 0x00	; 0
 962:	2a f0       	brmi	.+10     	; 0x96e <__floatsisf+0x6c>
 964:	9a 95       	dec	r25
 966:	66 0f       	add	r22, r22
 968:	77 1f       	adc	r23, r23
 96a:	88 1f       	adc	r24, r24
 96c:	da f7       	brpl	.-10     	; 0x964 <__floatsisf+0x62>
 96e:	88 0f       	add	r24, r24
 970:	96 95       	lsr	r25
 972:	87 95       	ror	r24
 974:	97 f9       	bld	r25, 7
 976:	08 95       	ret

00000978 <__fp_cmp>:
 978:	99 0f       	add	r25, r25
 97a:	00 08       	sbc	r0, r0
 97c:	55 0f       	add	r21, r21
 97e:	aa 0b       	sbc	r26, r26
 980:	e0 e8       	ldi	r30, 0x80	; 128
 982:	fe ef       	ldi	r31, 0xFE	; 254
 984:	16 16       	cp	r1, r22
 986:	17 06       	cpc	r1, r23
 988:	e8 07       	cpc	r30, r24
 98a:	f9 07       	cpc	r31, r25
 98c:	c0 f0       	brcs	.+48     	; 0x9be <__fp_cmp+0x46>
 98e:	12 16       	cp	r1, r18
 990:	13 06       	cpc	r1, r19
 992:	e4 07       	cpc	r30, r20
 994:	f5 07       	cpc	r31, r21
 996:	98 f0       	brcs	.+38     	; 0x9be <__fp_cmp+0x46>
 998:	62 1b       	sub	r22, r18
 99a:	73 0b       	sbc	r23, r19
 99c:	84 0b       	sbc	r24, r20
 99e:	95 0b       	sbc	r25, r21
 9a0:	39 f4       	brne	.+14     	; 0x9b0 <__fp_cmp+0x38>
 9a2:	0a 26       	eor	r0, r26
 9a4:	61 f0       	breq	.+24     	; 0x9be <__fp_cmp+0x46>
 9a6:	23 2b       	or	r18, r19
 9a8:	24 2b       	or	r18, r20
 9aa:	25 2b       	or	r18, r21
 9ac:	21 f4       	brne	.+8      	; 0x9b6 <__fp_cmp+0x3e>
 9ae:	08 95       	ret
 9b0:	0a 26       	eor	r0, r26
 9b2:	09 f4       	brne	.+2      	; 0x9b6 <__fp_cmp+0x3e>
 9b4:	a1 40       	sbci	r26, 0x01	; 1
 9b6:	a6 95       	lsr	r26
 9b8:	8f ef       	ldi	r24, 0xFF	; 255
 9ba:	81 1d       	adc	r24, r1
 9bc:	81 1d       	adc	r24, r1
 9be:	08 95       	ret

000009c0 <__fp_inf>:
 9c0:	97 f9       	bld	r25, 7
 9c2:	9f 67       	ori	r25, 0x7F	; 127
 9c4:	80 e8       	ldi	r24, 0x80	; 128
 9c6:	70 e0       	ldi	r23, 0x00	; 0
 9c8:	60 e0       	ldi	r22, 0x00	; 0
 9ca:	08 95       	ret

000009cc <__fp_nan>:
 9cc:	9f ef       	ldi	r25, 0xFF	; 255
 9ce:	80 ec       	ldi	r24, 0xC0	; 192
 9d0:	08 95       	ret

000009d2 <__fp_pscA>:
 9d2:	00 24       	eor	r0, r0
 9d4:	0a 94       	dec	r0
 9d6:	16 16       	cp	r1, r22
 9d8:	17 06       	cpc	r1, r23
 9da:	18 06       	cpc	r1, r24
 9dc:	09 06       	cpc	r0, r25
 9de:	08 95       	ret

000009e0 <__fp_pscB>:
 9e0:	00 24       	eor	r0, r0
 9e2:	0a 94       	dec	r0
 9e4:	12 16       	cp	r1, r18
 9e6:	13 06       	cpc	r1, r19
 9e8:	14 06       	cpc	r1, r20
 9ea:	05 06       	cpc	r0, r21
 9ec:	08 95       	ret

000009ee <__fp_round>:
 9ee:	09 2e       	mov	r0, r25
 9f0:	03 94       	inc	r0
 9f2:	00 0c       	add	r0, r0
 9f4:	11 f4       	brne	.+4      	; 0x9fa <__fp_round+0xc>
 9f6:	88 23       	and	r24, r24
 9f8:	52 f0       	brmi	.+20     	; 0xa0e <__fp_round+0x20>
 9fa:	bb 0f       	add	r27, r27
 9fc:	40 f4       	brcc	.+16     	; 0xa0e <__fp_round+0x20>
 9fe:	bf 2b       	or	r27, r31
 a00:	11 f4       	brne	.+4      	; 0xa06 <__fp_round+0x18>
 a02:	60 ff       	sbrs	r22, 0
 a04:	04 c0       	rjmp	.+8      	; 0xa0e <__fp_round+0x20>
 a06:	6f 5f       	subi	r22, 0xFF	; 255
 a08:	7f 4f       	sbci	r23, 0xFF	; 255
 a0a:	8f 4f       	sbci	r24, 0xFF	; 255
 a0c:	9f 4f       	sbci	r25, 0xFF	; 255
 a0e:	08 95       	ret

00000a10 <__fp_split3>:
 a10:	57 fd       	sbrc	r21, 7
 a12:	90 58       	subi	r25, 0x80	; 128
 a14:	44 0f       	add	r20, r20
 a16:	55 1f       	adc	r21, r21
 a18:	59 f0       	breq	.+22     	; 0xa30 <__fp_splitA+0x10>
 a1a:	5f 3f       	cpi	r21, 0xFF	; 255
 a1c:	71 f0       	breq	.+28     	; 0xa3a <__fp_splitA+0x1a>
 a1e:	47 95       	ror	r20

00000a20 <__fp_splitA>:
 a20:	88 0f       	add	r24, r24
 a22:	97 fb       	bst	r25, 7
 a24:	99 1f       	adc	r25, r25
 a26:	61 f0       	breq	.+24     	; 0xa40 <__fp_splitA+0x20>
 a28:	9f 3f       	cpi	r25, 0xFF	; 255
 a2a:	79 f0       	breq	.+30     	; 0xa4a <__fp_splitA+0x2a>
 a2c:	87 95       	ror	r24
 a2e:	08 95       	ret
 a30:	12 16       	cp	r1, r18
 a32:	13 06       	cpc	r1, r19
 a34:	14 06       	cpc	r1, r20
 a36:	55 1f       	adc	r21, r21
 a38:	f2 cf       	rjmp	.-28     	; 0xa1e <__fp_split3+0xe>
 a3a:	46 95       	lsr	r20
 a3c:	f1 df       	rcall	.-30     	; 0xa20 <__fp_splitA>
 a3e:	08 c0       	rjmp	.+16     	; 0xa50 <__fp_splitA+0x30>
 a40:	16 16       	cp	r1, r22
 a42:	17 06       	cpc	r1, r23
 a44:	18 06       	cpc	r1, r24
 a46:	99 1f       	adc	r25, r25
 a48:	f1 cf       	rjmp	.-30     	; 0xa2c <__fp_splitA+0xc>
 a4a:	86 95       	lsr	r24
 a4c:	71 05       	cpc	r23, r1
 a4e:	61 05       	cpc	r22, r1
 a50:	08 94       	sec
 a52:	08 95       	ret

00000a54 <__fp_zero>:
 a54:	e8 94       	clt

00000a56 <__fp_szero>:
 a56:	bb 27       	eor	r27, r27
 a58:	66 27       	eor	r22, r22
 a5a:	77 27       	eor	r23, r23
 a5c:	cb 01       	movw	r24, r22
 a5e:	97 f9       	bld	r25, 7
 a60:	08 95       	ret

00000a62 <_exit>:
 a62:	f8 94       	cli

00000a64 <__stop_program>:
 a64:	ff cf       	rjmp	.-2      	; 0xa64 <__stop_program>
